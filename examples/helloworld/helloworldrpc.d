module helloworld.helloworldrpc;


// Generated by the gRPC dlang plugin.
// If you make any local change, they will be lost.


import helloworld.helloworld;
import std.array;
//import hunt.net.Result;
import grpc;
import google.protobuf;
import hunt.logging;
import core.thread;
import std.stdio;

class GreeterClient
{
    this(Channel channel)
    {
        _channel = channel;
    }

    HelloReply SayHello( HelloRequest request)
    {
        mixin(CM!( HelloReply,GreeterBase.SERVICE));
    }

    HelloReply SayGoodBye( HelloRequest request)
    {
        mixin(CM!( HelloReply,GreeterBase.SERVICE));
    }

    void SayHello( HelloRequest request , void delegate(ubyte[] complete) dele)
    {
        mixin(CMA!(HelloReply , GreeterBase.SERVICE));
    }

    void SayGoodBye( HelloRequest request , void delegate(ubyte[] complete) dele)
    {
        mixin(CMA!(HelloReply , GreeterBase.SERVICE));
    }

    void  onDataSayHello (ubyte[] complete)
    {
        HelloReply resp = new HelloReply();
        complete.fromProtobuf!HelloReply(resp);
        tracef("^^^^^^^^^^^^resp:%s",resp.message);
    }

    void  onDataSayGoodBye (ubyte[] complete)
    {
        HelloReply resp = new HelloReply();
        complete.fromProtobuf!HelloReply(resp);
        tracef("^^^^^^^^^^^^resp:%s",resp.message);
    }

    private:
    Channel _channel;
}


class GreeterBase: GrpcService
{
    enum SERVICE  = "helloworld.Greeter";
    string getModule()
    {
        return SERVICE;
    }

    Status SayHello( HelloRequest , ref HelloReply ){ return Status.OK; }
    Status SayGoodBye( HelloRequest , ref HelloReply ){ return Status.OK; }



    Status process(string method ,   GrpcStream stream , ubyte[] complete)
    {
        switch(method)
        {
            mixin(SM!(HelloRequest , HelloReply , "SayHello"));
            mixin(SM!(HelloRequest , HelloReply , "SayGoodBye"));
            mixin(NONE());
        }
        //return status;
    }
}

